<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>120</x>
      <y>0</y>
      <w>320</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime : clock_t

--
+ startTimer() : void
+ stopTimer() : void
+ resetTimer() : void
+ displayTimerInformation() : void
+ getExecutionTimeInMicroseconds() : long

+ Timer() : constructor

bg=gray
transparancy=0

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>120</x>
      <y>240</y>
      <w>290</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *

--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int) : void
+ setNodePointer(IntNode *) : void

+ IntNode() : constructor
+ IntNode(int) : constructor
+ IntNode(int, IntNode *) : constructor

bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>570</x>
      <y>210</y>
      <w>260</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- head : IntNode* 
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int, int) : void

bg=red
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>120</x>
      <y>610</y>
      <w>450</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
Constructors
+ Node&lt;Type&gt;() : contructor
+ Node&lt;Type&gt;(Type value) : constructor
+ Node&lt;Type&gt;(Type value, Node&lt;Type&gt;* next) : constructor

Accessors

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt;*
+ setNodeData(Type value) : void
+ setNodePointer(Node&lt;Type&gt;* next) : void
bg=cyan

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>820</x>
      <y>430</y>
      <w>490</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int
--
+ Array() : default contructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : default destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>390</x>
      <y>270</y>
      <w>200</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1330</x>
      <y>600</y>
      <w>470</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>Model : List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt;*
+ getEnd() const : Node&lt;Type&gt; *

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>610</y>
      <w>280</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>260.0;10.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>930</y>
      <w>860</w>
      <h>390</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- nextPointer : BiDirectionalNode&lt;Type&gt; *
- previousPointer : BiDirectionalNode&lt;Type&gt; *

--
Constructors
+ BiDirectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value, BiDirectionalNode&lt;Type&gt; * next) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value,BiDirectionalNode&lt;Type&gt; * next, BiDirectionalNode&lt;Type&gt; * previous): constructor


Accessors
+ getNodeData() : Type
+ setNodeData() : void
+ getNextPointer() : BiDirectionalNode&lt;Type&gt; *
+ setNextPointer() : void
+ getPreviousPointer() : BiDirectionalNode&lt;Type&gt; *
+ setPreviousPointer() : void

bg=magenta
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>770</y>
      <w>790</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>770.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1540</x>
      <y>1300</y>
      <w>300</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>CircularList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>850</y>
      <w>30</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>1390</y>
      <w>780</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>DoubleLinkedList&lt;Type&gt;
--
- size : int
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
--
+ DoubleLinkedList&lt;Type&gt;() : constructor
+ DoubleLinkedList&lt;Type&gt;(const DoubleLinkedList&lt;Type&gt; &amp; source) : copy constructor
+ ~DoubleLinkedList&lt;Type&gt;() : destructor

+ addFront(Type value) : void 
+ addEnd(Type value) : void
+ addAtIndex(int index, Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type value) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>450</x>
      <y>1310</y>
      <w>50</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1160</x>
      <y>940</y>
      <w>370</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>/DoublyLinkedList&lt;Type&gt;/
-
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
-
DoublyLinkedList() : constructor
virtual ~DoublyLinkedList() : destructor

Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
/+ add(Type value) : void/
/+ remove(int) : Type/

bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>1070</y>
      <w>220</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>200.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>990</x>
      <y>1310</y>
      <w>260</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>Queue
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1260</x>
      <y>1310</y>
      <w>260</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>Stack
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>120</x>
      <y>1740</y>
      <w>550</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--
+ BinarySearchTreeNode() : constructor
+ BinarySearchTreeNode(Type data) : constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1340</x>
      <y>1190</y>
      <w>40</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>20.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1390</x>
      <y>1190</y>
      <w>230</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;210.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1090</x>
      <y>1190</y>
      <w>200</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1870</x>
      <y>1310</y>
      <w>320</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>DoubleList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type data) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1480</x>
      <y>1190</y>
      <w>510</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;490.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>810</x>
      <y>1720</y>
      <w>650</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>/Model :: Tree&lt;Type&gt;/
--
*Informational Methods*
/+ getSize() : int/
/+ getHeight() : int/
/+ isComplete() : bool/
/+ isBalanced() : bool/

*Traversals*
/+ inOrderTraversal() : void/
/+ preOrderTraversal() : void/
/+ postOrderTraversal() :void/

*Data Operations*
/+ insert(Type) : void/
/+ contains(Type) : bool/
/+ remove(Type) : void/



bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>30</x>
      <y>810</y>
      <w>110</w>
      <h>1040</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0;20.0;1020.0;90.0;1020.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>130</x>
      <y>2130</y>
      <w>460</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; *
- size :  int (inherited)
- height : int (inherited)
- complete : bool (inherited)
- balanced : bool (inherited)
--
+ BinarySearchTree() : constructor
+ ~BinarySerachTree() : destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

- calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int

- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinarySearchTreeNode&lt;Type&gt;  *) : void
- postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void

bg=magenta

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1240</x>
      <y>130</y>
      <w>200</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>ClassName
--
data members
--
methods and constructors</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>320</x>
      <y>2080</y>
      <w>710</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>690.0;10.0;690.0;30.0;10.0;20.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>1990</y>
      <w>50</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;140.0</additional_attributes>
  </element>
</diagram>
