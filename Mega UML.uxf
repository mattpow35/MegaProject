<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>848</x>
      <y>200</y>
      <w>128</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime : clock_t

--
+ startTimer() : void
+ stopTimer() : void
+ resetTimer() : void
+ displayTimerInformation() : void
+ getExecutionTimeInMicroseconds() : long

+ Timer() : constructor

bg=gray
transparancy=0

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>132</x>
      <y>116</y>
      <w>116</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *

--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int) : void
+ setNodePointer(IntNode *) : void

+ IntNode() : constructor
+ IntNode(int) : constructor
+ IntNode(int, IntNode *) : constructor

bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>296</x>
      <y>136</y>
      <w>104</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- head : IntNode* 
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int, int) : void

bg=red
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>132</x>
      <y>236</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
Constructors
+ Node&lt;Type&gt;() : contructor
+ Node&lt;Type&gt;(Type value) : constructor
+ Node&lt;Type&gt;(Type value, Node&lt;Type&gt;* next) : constructor

Accessors

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt;*
+ setNodeData(Type value) : void
+ setNodePointer(Node&lt;Type&gt;* next) : void
bg=cyan

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>412</x>
      <y>164</y>
      <w>196</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int
--
+ Array() : default contructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : default destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>244</x>
      <y>160</y>
      <w>60</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>130.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>616</x>
      <y>232</y>
      <w>188</w>
      <h>124</h>
    </coordinates>
    <panel_attributes>Model : List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt;*
+ getEnd() const : Node&lt;Type&gt; *

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>308</x>
      <y>236</y>
      <w>112</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>260.0;10.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>128</x>
      <y>364</y>
      <w>344</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- nextPointer : BiDirectionalNode&lt;Type&gt; *
- previousPointer : BiDirectionalNode&lt;Type&gt; *

--
Constructors
+ BiDirectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value, BiDirectionalNode&lt;Type&gt; * next) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value,BiDirectionalNode&lt;Type&gt; * next, BiDirectionalNode&lt;Type&gt; * previous): constructor


Accessors
+ getNodeData() : Type
+ setNodeData() : void
+ getNextPointer() : BiDirectionalNode&lt;Type&gt; *
+ setNextPointer() : void
+ getPreviousPointer() : BiDirectionalNode&lt;Type&gt; *
+ setPreviousPointer() : void

bg=magenta
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>308</x>
      <y>300</y>
      <w>316</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>770.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>512</y>
      <w>120</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>CircularList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>196</x>
      <y>332</y>
      <w>12</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>128</x>
      <y>548</y>
      <w>312</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>DoubleLinkedList&lt;Type&gt;
--
- size : int
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
--
+ DoubleLinkedList&lt;Type&gt;() : constructor
+ DoubleLinkedList&lt;Type&gt;(const DoubleLinkedList&lt;Type&gt; &amp; source) : copy constructor
+ ~DoubleLinkedList&lt;Type&gt;() : destructor

+ addFront(Type value) : void 
+ addEnd(Type value) : void
+ addAtIndex(int index, Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type value) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>264</x>
      <y>516</y>
      <w>20</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>548</x>
      <y>368</y>
      <w>148</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>/DoublyLinkedList&lt;Type&gt;/
-
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
-
DoublyLinkedList() : constructor
virtual ~DoublyLinkedList() : destructor

Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
/+ add(Type value) : void/
/+ remove(int) : Type/

bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>468</x>
      <y>420</y>
      <w>88</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>200.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>516</y>
      <w>104</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>Queue
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>588</x>
      <y>516</y>
      <w>104</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>Stack
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>160</x>
      <y>688</y>
      <w>232</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--
+ BinarySearchTreeNode() : constructor
+ BinarySearchTreeNode(Type data) : constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>468</y>
      <w>16</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>20.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>640</x>
      <y>468</y>
      <w>92</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;210.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>520</x>
      <y>468</y>
      <w>80</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>832</x>
      <y>516</y>
      <w>128</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>DoubleList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type data) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>676</x>
      <y>468</y>
      <w>204</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;490.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>520</x>
      <y>640</y>
      <w>260</w>
      <h>148</h>
    </coordinates>
    <panel_attributes>/Model :: Tree&lt;Type&gt;/
--
*Informational Methods*
/+ getSize() : int/
/+ getHeight() : int/
/+ isComplete() : bool/
/+ isBalanced() : bool/

*Traversals*
/+ inOrderTraversal() : void/
/+ preOrderTraversal() : void/
/+ postOrderTraversal() :void/

*Data Operations*
/+ insert(Type) : void/
/+ contains(Type) : bool/
/+ remove(Type) : void/



bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>96</x>
      <y>316</y>
      <w>72</w>
      <h>416</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0;20.0;1020.0;160.0;1020.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>332</x>
      <y>848</y>
      <w>224</w>
      <h>232</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; *
--
+ BinarySearchTree() : constructor
+ ~BinarySerachTree() : destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

*Recursive Helper Methods*
# calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
# calculateHeight(BinarySearchTreeNode&lt;Type&gt; *) : int
# isComplete(BinarySearchTreeNode&lt;Type&gt; *) : bool
# isBalanced(BinarySearchTreeNode&lt;Type&gt; *) : bool

# removeNdoe(BinarySearchTreeNode&lt;Type&gt; *) : void

# inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# preOrderTraversal(BinarySearchTreeNode&lt;Type&gt;  *) : void
# postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void

*Informational*
+ getSize() : int
+ getHeight() : int
+ isBalanced() : bool
+ isComplete() : bool

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Data Operations*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void


bg=magenta

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>984</x>
      <y>372</y>
      <w>220</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>HashTable&lt;Type&gt;
--
- capacity : long
- size : long
- efficiencyPercentage : double
- hashTableStorage : HashNode&lt;Type&gt; * *
--
+ HashTable() : constructor
+ ~HashTable() : destructor

- isPrime(long sampleNumber)
- resize() : void
- nextPrime() : long
- findPosition(HashNode&lt;Type&gt; * data) : long
- handleCollision(HashNode&lt;Type&gt; * data, long currentPosition) : long

+ add(Type data) : void
+ remove(Typd data) : bool
+ displayContents() : void
+ getSize() : long

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>408</x>
      <y>784</y>
      <w>200</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>480.0;10.0;480.0;100.0;10.0;110.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>216</x>
      <y>788</y>
      <w>200</w>
      <h>68</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0;460.0;100.0;460.0;150.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>808</x>
      <y>644</y>
      <w>312</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>Model :: Graph&lt;Type&gt;
--
- static const MAXIMUM : int
- adjacentMatrix : bool [][]
- grapData : Type []
- vertexCount : int
--
+ Graph() : constructor
+ ~Graph() destructor
*Graph operations*
+ addVertex(const Type&amp; value) : void 
+ addEdge(int source, int target) : void
+ removeEdge(int source, int target) : void
+ addEdgeUndirected(int source, int target) : void 
+ removeEdgeUndirected(int source, int target) : void
*Accessors*
+ operator [] (int vertex) : Type&amp;
+ operator [] (int vertex) const : Type
+ size() const : int
*Check Connections*
+ hasUndirectedConnection(int source, int target) const : bool
+ areConnected(int source, int target)const : bool
+ neighbors(int vertex) const : std::set&lt;int&gt;
*Traversals*
+ depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex) : void
+ breadthFirstTraversal(Graph&lt;Type&gt;graph, int vertex) : void
*Recursive helper method*
- depthFirstTraversal(Graph&lt;Type&gt;graph, int vertex, bool markedVertices[]) : void


bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>664</x>
      <y>856</y>
      <w>280</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Model :: AVLTree&lt;Type&gt;
--
# root : BinarySearchTreeNode&lt;Type&gt; * (inherited)
--
*Constructor/Deestructor*
+ AVLTree() : constructor
+ ~AVLTree() : destructor

*Rotatations*
- leftRotation(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt;
- rightRotation(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt;
- leftRightRotation(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt;
- rightLeftRotation(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt;

*Helper Methods*
- balanceSubTree(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt; *
- insertNode(BinarySearchTreeNode&lt;Type&gt; * parent, Type value) : BinarySearchTreeNode&lt;Type&gt;*
- removeNode(BinarySearchTreeNode&lt;Type&gt; * parent, Type value) : BinarySearchTreeNode&lt;Type&gt; *
- heightDifference(BinarySearchTreeNode&lt;Type&gt; * parent) : int

*Data Operations*
+ insert(Type value) : void
+ remove(Type value) : void


bg=magenta

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>284</x>
      <y>788</y>
      <w>440</w>
      <h>76</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;1060.0;40.0;1060.0;170.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>552</x>
      <y>916</y>
      <w>120</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;20.0;280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>796</x>
      <y>372</y>
      <w>120</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>HashNode&lt;Type&gt;
--
- data : Type
- key : long
--
+ HashNode() : constructor
+ HashNode(Type data) : constructor

+ getData() : Type
+ getKey() : long
+ setData(Type data) : void

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>912</x>
      <y>420</y>
      <w>80</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>464</x>
      <y>124</y>
      <w>120</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>/*Matt Powley*/
/Mega UML/

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
